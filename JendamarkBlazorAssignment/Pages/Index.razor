@page "/"
@using JendamarkBlazorAssignment.Data
@using JendamarkBlazorAssignment.Models;
@using JendamarkBlazorAssignment.Components;
@using System.IO;
@using System.Text;
@inject OperationService Service
@inject State State


<table class="table">
    <thead>
        <tr>
            <th><button class="btn btn-primary" @onclick="@(() => AddNewOperation())">Add</button></th>
            <th>Operation ID</th>
            <th>Name</th>
            <th>Order in which to perform</th>
            <th>Image</th>
            <th>Device ID</th>
            <th>Device Name</th>
            <th>Device Type</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var operation in operations)
        {
            <tr>
                <td>
                    <button @onclick="@(() => Edit(operation))"><img src="Images/edit.png" height="30" width="30" /></button>
                    <button @onclick="@(() => Remove(operation.OperationID))"><img src="Images/delete.png" height="30" width="30" /></button>
                </td>

                <td>@operation.OperationID</td>
                <td>@operation.Name</td>
                <td>@operation.OrderInWhichToPerform</td>
                <td><img src="@operation.ImageDataUrl" width="30" height="30" /></td>
                <td>@operation.Device.DeviceID</td>
                <td>@operation.Device.Name</td>
                <td>@operation.Device.DeviceType</td>
            </tr>
        }
    </tbody>
</table>


@code {
    private List<Operation> operations;

    [CascadingParameter] public IModalService Modal { get; set; }

    protected override async Task OnInitializedAsync()
    {
        operations = await Service.GetOperationAsync();
    }

    void Remove(Guid operationId)
    {
        operations = operations.Where(x => x.OperationID != operationId).ToList();
    }

    async Task Edit(Operation model)
    {
        var options = new ModalOptions()
        {
            Animation = ModalAnimation.FadeInOut(1),
            HideCloseButton = false,
            Class = "blazored-modal-movies"
        };

        State.GlobalOperation = model;

        var formModel = Modal.Show<EditOperationComponent>("Edit Operation");
        var result = await formModel.Result;

        operations = operations.Where(x => x.OperationID != model.OperationID).ToList();
        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");
        }
        else
        {
            ModalParameters resultModel = result.Data as ModalParameters;
            var editmodel = resultModel.TryGet<Operation>("Operation");
            editmodel.ImageDataUrl = string.Format("data:image/jpeg;base64,{0}", Convert.ToBase64String(model.ImageData));

            operations.Add(editmodel);

            operations = operations.OrderBy(x => x.OrderInWhichToPerform).ToList();
        }
    }

    async Task AddNewOperation()
    {
        var options = new ModalOptions()
        {
            Animation = ModalAnimation.FadeInOut(1),
            HideCloseButton = true,
            Class = "blazored-modal-movies"
        };

        var formModel = Modal.Show<AddOperationComponent>("Add Operation");
        var result = await formModel.Result;

        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");
        }
        else
        {
            ModalParameters resultModel = result.Data as ModalParameters;

            var model = resultModel.TryGet<Operation>("Operation");

            if (model.ImageData is null)
            {
                model.ImageData = new byte[0];
            }


            CreateNewOperation(model);

        }

        void CreateNewOperation(Operation model)
        {
            List<Operation> list = new List<Operation>();

            foreach (var item in operations)
            {
                list.Add(item);
            }

            list.Add(new Operation
            {
                Name = model.Name,
                OrderInWhichToPerform = model.OrderInWhichToPerform,
                ImageDataUrl = string.Format("data:image/jpeg;base64,{0}", Convert.ToBase64String(model.ImageData)),
                OperationID = Guid.NewGuid(),
                Device = new Device() { Name = model.Device.Name, DeviceID = Guid.NewGuid(), DeviceType = model.Device.DeviceType },
            });

            list = operations = list.OrderBy(x => x.OrderInWhichToPerform).ToList();
        }
    }
}